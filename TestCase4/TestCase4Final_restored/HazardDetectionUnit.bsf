/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/
/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/
(header "symbol" (version "1.1"))
(symbol
	(rect 16 16 200 208)
	(text "HazardDetectionUnit" (rect 5 0 106 12)(font "Arial" ))
	(text "inst" (rect 8 176 25 188)(font "Arial" ))
	(port
		(pt 0 32)
		(input)
		(text "EX_regT[3..0]" (rect 0 0 66 12)(font "Arial" ))
		(text "EX_regT[3..0]" (rect 21 27 87 39)(font "Arial" ))
		(line (pt 0 32)(pt 16 32)(line_width 3))
	)
	(port
		(pt 0 48)
		(input)
		(text "ID_regS[3..0]" (rect 0 0 66 12)(font "Arial" ))
		(text "ID_regS[3..0]" (rect 21 43 87 55)(font "Arial" ))
		(line (pt 0 48)(pt 16 48)(line_width 3))
	)
	(port
		(pt 0 64)
		(input)
		(text "ID_regT[3..0]" (rect 0 0 64 12)(font "Arial" ))
		(text "ID_regT[3..0]" (rect 21 59 85 71)(font "Arial" ))
		(line (pt 0 64)(pt 16 64)(line_width 3))
	)
	(port
		(pt 0 80)
		(input)
		(text "EX_memRead" (rect 0 0 69 12)(font "Arial" ))
		(text "EX_memRead" (rect 21 75 90 87)(font "Arial" ))
		(line (pt 0 80)(pt 16 80)(line_width 1))
	)
	(port
		(pt 0 96)
		(input)
		(text "MEM_branch" (rect 0 0 62 12)(font "Arial" ))
		(text "MEM_branch" (rect 21 91 83 103)(font "Arial" ))
		(line (pt 0 96)(pt 16 96)(line_width 1))
	)
	(port
		(pt 0 112)
		(input)
		(text "MEM_jump" (rect 0 0 53 12)(font "Arial" ))
		(text "MEM_jump" (rect 21 107 74 119)(font "Arial" ))
		(line (pt 0 112)(pt 16 112)(line_width 1))
	)
	(port
		(pt 0 128)
		(input)
		(text "MEMmem_read" (rect 0 0 75 12)(font "Arial" ))
		(text "MEMmem_read" (rect 21 123 96 135)(font "Arial" ))
		(line (pt 0 128)(pt 16 128)(line_width 1))
	)
	(port
		(pt 0 144)
		(input)
		(text "clock" (rect 0 0 25 12)(font "Arial" ))
		(text "clock" (rect 21 139 46 151)(font "Arial" ))
		(line (pt 0 144)(pt 16 144)(line_width 1))
	)
	(port
		(pt 184 32)
		(output)
		(text "PC_write" (rect 0 0 43 12)(font "Arial" ))
		(text "PC_write" (rect 120 27 163 39)(font "Arial" ))
		(line (pt 184 32)(pt 168 32)(line_width 1))
	)
	(port
		(pt 184 48)
		(output)
		(text "IF_ID_write" (rect 0 0 56 12)(font "Arial" ))
		(text "IF_ID_write" (rect 107 43 163 55)(font "Arial" ))
		(line (pt 184 48)(pt 168 48)(line_width 1))
	)
	(port
		(pt 184 64)
		(output)
		(text "deassert" (rect 0 0 42 12)(font "Arial" ))
		(text "deassert" (rect 121 59 163 71)(font "Arial" ))
		(line (pt 184 64)(pt 168 64)(line_width 1))
	)
	(port
		(pt 184 80)
		(output)
		(text "flush" (rect 0 0 24 12)(font "Arial" ))
		(text "flush" (rect 139 75 163 87)(font "Arial" ))
		(line (pt 184 80)(pt 168 80)(line_width 1))
	)
	(drawing
		(rectangle (rect 16 16 168 176)(line_width 1))
	)
)
